def pawn_moves():
    #GENERATE AND RETURN VECTORS THAT REPRESENT WHERE A PAWN CAN MOVE AND OR CAPTURE RELATIVE TO ITS CURRENT POSITION
    moves = []
    captures = []
    moves.append([0.1])
    captures.append([1,1], [-1,1])
    return {"moves":moves, "captures":captures}

def rook_moves():
    #GENERATE AND RETURN VECTORS THAT REPRESENT WHERE A ROOK CAN MOVE AND OR CAPTURE RELATIVE TO ITS CURRENT POSITION
    moves = []
    captures = []
        for i in range(0,8):
        moves.append([i,0])
        moves.append([-i,0])
        moves.append([0,i])
        moves.append([0,-i])
        captures.append([i,0])
        captures.append([-i,0])
        captures.append([0,i])
        captures.append([0,-i])
    return {"moves":moves, "captures":captures}

def bishop_moves():
    #GENERATE AND RETURN VECTORS THAT REPRESENT WHERE A BISHOP CAN MOVE AND OR CAPTURE RELATIVE TO ITS CURRENT POSITION
    moves = []
    captures = []
    for i in range(0,8):
        moves.append([i,i])
        moves.append([-i,i])
        moves.append([i,-i])
        moves.append([-i,-i])
        captures.append([i,i])
        captures.append([-i,i])
        captures.append([i,-i])
        captures.append([-i,-i])
    return {"moves":moves, "captures":captures}

def knight_moves():
    #GENERATE AND RETURN VECTORS THAT REPRESENT WHERE A KNIGHT CAN MOVE AND OR CAPTURE RELATIVE TO ITS CURRENT POSITION
    moves = [[1,2],[2,1],[-1,2],[-2,1],[1,-2],[2,-1],[-1,-2],[-2,-1]]
    captures = [[1,2],[2,1],[-1,2],[-2,1],[1,-2],[2,-1],[-1,-2],[-2,-1]]
    return {"moves":moves, "captures":captures}

def queen_moves():
    #GENERATE AND RETURN VECTORS THAT REPRESENT WHERE A QUEEN CAN MOVE AND OR CAPTURE RELATIVE TO ITS CURRENT POSITION
    #BISHOP + ROOK
    moves = []
    captures = []
    return {"moves":moves, "captures":captures}

def king_moves():
    #GENERATE AND RETURN VECTORS THAT REPRESENT WHERE A KING CAN MOVE AND OR CAPTURE RELATIVE TO ITS CURRENT POSITION
    #EVERY COMBINATION OF 0,1, AND -1 EXCEPT 0,0
    moves = []
    captures = []
    return {"moves":moves, "captures":captures}

def validate_coordinates(coordinates):
    #CHECK IF A GIVEN PAIR OF COORDINATES ON THE BOARD MAPS TO A VALID LOCATION ON THE BOARD
    if coordinates[0] >= 0 && coordinates[0] < 8 && \
       coordinates[1] >= 0 && coordinates[1] < 8:
        return True
    else:
        return False

def eval_moves(position, moves):
    #TAKE IN THE CURRENT POSITION AND A DICTIONARY OF MOVES AND CAPTURES.
    #REPLACE ALL MOVES AND CAPTURES WITH THE RESULTING LOCATIONS ON THE BOARD
    return_moves = {"moves":[], "captures":[]}
    for m in moves["moves"]:
        #CREATE A COPY OF THE ORIGINAL COORDINATES
        #ADD THE X/Y VALUES OF A MOVE VECTOR TO THAT COORDINATE
        new_position = position
        new_position[0] += m[0]
        new_position[1] += m[1]
        if validate_coordinates(new_position):
            return_moves["moves"].append(new_position)
    for c in moves["captures"]:
        #CREATE A COPY OF THE ORIGINAL COORDINATES
        #ADD THE X/Y VALUES OF A CAPTURE VECTOR TO THAT COORDINATE
        new_position = position
        new_position[0] += c[0]
        new_position[1] += c[1]
        if validate_coordinates(new_position):
            return_moves["captures"].append(new_position)
    return return_moves

